name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
            archive-name: dotx-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: ".exe"
            archive-name: dotx-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
            archive-name: dotx-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""
            archive-name: dotx-macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
        sudo apt-get install -y dpkg-dev python3-pil

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Install minimap2 for Windows
        choco install msys2
        msys2 -c "pacman -S --noconfirm mingw-w64-x86_64-gcc"

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build CLI binary
      run: cargo build --release --target ${{ matrix.target }} --bin dotx

    - name: Build GUI binary  
      run: cargo build --release --target ${{ matrix.target }} --bin dotx-gui

    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --release --target ${{ matrix.target }}

    - name: Package binaries
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/dotx${{ matrix.binary-suffix }} dist/
        cp target/${{ matrix.target }}/release/dotx-gui${{ matrix.binary-suffix }} dist/
        cp README.md dist/
        cp LICENSE dist/ 2>/dev/null || echo "LICENSE file not found"
        
        # Create DEB package for Linux
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Create icon
          python3 packaging/linux/create_icon.py
          
          # Build DEB package
          ./scripts/build-deb.sh 1.0.0
          
          # Move DEB package to artifacts
          mv *.deb ${{ matrix.archive-name }}.deb
        fi
        
        # Create archive
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cd dist && 7z a ../${{ matrix.archive-name }}.zip * && cd ..
        else
          cd dist && tar -czf ../${{ matrix.archive-name }}.tar.gz * && cd ..
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.archive-name }}
        path: |
          ${{ matrix.archive-name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/dotx-*.*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}